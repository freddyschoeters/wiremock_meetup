{
	"info": {
		"_postman_id": "5aa27c60-6960-4a7a-b17b-d9414de910ba",
		"name": "Wiremock",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9490435"
	},
	"item": [
		{
			"name": "ex1_tests_simpleResponseAllUsers",
			"item": [
				{
					"name": "getUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has 10 users\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex2_tests_simpleResponseUser1",
			"item": [
				{
					"name": "getUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 1\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex3_tests_simpleResponseUser2ForAnyOtherID",
			"item": [
				{
					"name": "getUser2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 2\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"2\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser42",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 2\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/42",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"42"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 1\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex4_tests_user99NotFoundError",
			"item": [
				{
					"name": "getUser99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"error message is correct\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(666);",
									"    pm.expect(jsonData.description).to.eql(\"User is not found. Could be the devil!\");",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/99",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"99"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 2\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 1\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex5_tests_userOneBadRequest",
			"item": [
				{
					"name": "getUserOne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"error message is correct\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(666666);",
									"    pm.expect(jsonData.description).to.eql(\"Bad request! This is fur sure the devil!\");",
									"});",
									"",
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/one",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"one"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 2\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 1\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex6_tests_userIDfromPathOrQuery",
			"item": [
				{
					"name": "getUserX with pathParameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let userid = pm.request.url.path[1];",
									"",
									"pm.test(\"ID of the user is \" + userid, function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(userid);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserX with queryParameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let userid = pm.request.url.query.get('user')",
									"",
									"pm.test(\"ID of the user is \" + userid, function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(userid);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users?user=4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "user",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"ID of the user is 1\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex7_tests_postUser",
			"item": [
				{
					"name": "postUser OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"pm.test(\"Body has only 1 property\", function(){",
									"    var numberOfProperties = Object.keys(pm.response.json()).length;",
									"    pm.expect(numberOfProperties).to.eql(1);",
									"});",
									"",
									"pm.test(\"ID of the user is 1\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"1\",\n    \"name\": \"Leanne Graham\",\n    \"username\": \"KleineSmurf\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1234567890\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex8_test_postUserWithReturningValues",
			"item": [
				{
					"name": "postUser OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"userid = JSON.parse(pm.request.body.raw).id",
									"username = JSON.parse(pm.request.body.raw).name",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"ID of the user is \" + userid, function(){",
									"    pm.expect(jsonData.id).to.eql(userid);",
									"});",
									"",
									"pm.test(\"Name of the user is \" + username, function(){",
									"    pm.expect(jsonData.name).to.eql(username);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"67\",\n    \"name\": \"Leanne Graham\",\n    \"username\": \"KleineSmurf\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1234567890\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex9_tests_postUserWithAlreadyExistingName",
			"item": [
				{
					"name": "postUser Username Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Errorcode is 123\", function(){",
									"    pm.expect(jsonData.errorCode).to.eql(123);",
									"});",
									"",
									"pm.test(\"ErrorDescription is\", function(){",
									"    pm.expect(jsonData.errorDescription).to.eql(\"Username already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"67\",\n    \"name\": \"Leanne Graham\",\n    \"username\": \"GroteSmurf\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1234567890\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "postUser OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"userid = JSON.parse(pm.request.body.raw).id",
									"username = JSON.parse(pm.request.body.raw).name",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"ID of the user is \" + userid, function(){",
									"    pm.expect(jsonData.id).to.eql(userid);",
									"});",
									"",
									"pm.test(\"Name of the user is \" + username, function(){",
									"    pm.expect(jsonData.name).to.eql(username);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"67\",\n    \"name\": \"Leanne Graham\",\n    \"username\": \"KleineSmurf\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1234567890\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ex10_tests_postUserWithInvalidPhonenumber",
			"item": [
				{
					"name": "postUser OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"userid = JSON.parse(pm.request.body.raw).id",
									"username = JSON.parse(pm.request.body.raw).name",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"ID of the user is \" + userid, function(){",
									"    pm.expect(jsonData.id).to.eql(userid);",
									"});",
									"",
									"pm.test(\"Name of the user is \" + username, function(){",
									"    pm.expect(jsonData.name).to.eql(username);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"67\",\n    \"name\": \"Leanne Graham\",\n    \"username\": \"KleineSmurf\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1234567890\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "postUser Username Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Errorcode is 123\", function(){",
									"    pm.expect(jsonData.errorCode).to.eql(123);",
									"});",
									"",
									"pm.test(\"ErrorDescription is\", function(){",
									"    pm.expect(jsonData.errorDescription).to.eql(\"Username already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"67\",\n    \"name\": \"Leanne Graham\",\n    \"username\": \"GroteSmurf\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1234567890\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "postUser Invalid phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Errorcode is 456\", function(){",
									"    pm.expect(jsonData.errorCode).to.eql(456);",
									"});",
									"",
									"pm.test(\"ErrorDescription is\", function(){",
									"    pm.expect(jsonData.errorDescription).to.eql(\"Invalid format of the phoneNr\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Leanne Graham\",\n    \"username\": \"Bret\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n        }\n    },\n    \"phone\": \"1-770-736-8031 x56442\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Display Mappings",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/__admin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"__admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUsersXml",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/xml/getusers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"xml",
						"getusers"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "port",
			"value": "9002"
		}
	]
}